
class Nodo {
    int valor;
    Nodo izquierdo, derecho;

    public Nodo(int item) {
        valor = item;
        izquierdo = derecho = null;
    }
}


class ArbolBinarioBusqueda {
    Nodo raiz;

 
    public ArbolBinarioBusqueda() {
        raiz = null;
    }

    void insertar(int valor) {
        raiz = insertarRec(raiz, valor);
    }

   
    Nodo insertarRec(Nodo raiz, int valor) {
        // Si el árbol está vacío, retorna un nuevo nodo
        if (raiz == null) {
            raiz = new Nodo(valor);
            return raiz;
        }

      
        if (valor < raiz.valor)
            raiz.izquierdo = insertarRec(raiz.izquierdo, valor);
        else if (valor > raiz.valor)
            raiz.derecho = insertarRec(raiz.derecho, valor);

      
        return raiz;
    }

    void imprimirArbol() {
        imprimirArbolRec(raiz);
    }


    void imprimirArbolRec(Nodo raiz) {
        if (raiz != null) {
            imprimirArbolRec(raiz.izquierdo);
            System.out.print(raiz.valor + " ");
            imprimirArbolRec(raiz.derecho);
        }
    }

    // Método principal para probar el árbol binario de búsqueda
    public static void main(String[] args) {
        ArbolBinarioBusqueda arbol = new ArbolBinarioBusqueda();

        // Insertar nodos en el árbol
        arbol.insertar(50);
        arbol.insertar(30);
        arbol.insertar(20);
        arbol.insertar(40);
        arbol.insertar(70);
        arbol.insertar(60);
        arbol.insertar(80);

   
        System.out.println("Árbol binario de búsqueda en orden:");
        arbol.imprimirArbol();
    }
}